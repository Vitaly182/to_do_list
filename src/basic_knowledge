let name1: any;               // for all types
let name2: unknown;           // for all types
let name3: string;
let age1: number;
let age2: number | string;    //union number and string
let isStudent: boolean;
let hobbies: string[];        // array of strings
let role: [number, string];    // tuple

interface Person1 {
    name: string;
    age?: number;
}
// interface can be extended other interface
interface Guy extends Person1 {
    profession: string;
}

type Person2 = {
    name: string;
    age?: number;
}
// type can be extended other type
type Person3 = Person2 & {
    size: string;
    role?: number;
}

let person: Person2;             //object
let lotsOfPeople: Person2[];     //lots of objects


let printName1: (name: string) => void;      // function    void return undefined
let printName2: (name: string) => never;     // function    never doesn't return anything
